name: Publish Node.js Package

on:
  # Trigger on new releases
  release:
    types: [published]
  
  # Manual trigger option
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty for package.json version)'
        required: false
        type: string
      publish_to_gpr:
        description: 'Publish to GitHub Package Registry'
        required: false
        type: boolean
        default: false

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 23.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: |
          cd backend
          npm cache clean --force
          rm -rf node_modules package-lock.json
          npm install

      - name: Run tests
        run: |
          cd backend
          npm test

      - name: Run lint
        run: |
          cd backend
          npm run lint

      - name: Build project
        run: |
          cd backend
          npm run build

  publish-npm:
    needs: test
    runs-on: ubuntu-latest
    if: (github.event_name == 'release' || github.event_name == 'workflow_dispatch') && secrets.NPM_TOKEN != ''
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: |
          cd backend
          npm cache clean --force
          rm -rf node_modules package-lock.json
          npm install

      - name: Build project
        run: |
          cd backend
          npm run build

      - name: Update version (if specified)
        if: github.event.inputs.version != ''
        run: |
          cd backend
          npm version ${{ github.event.inputs.version }} --no-git-tag-version

      - name: Publish to npm
        run: |
          cd backend
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-gpr:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_gpr == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'

      - name: Install dependencies
        run: |
          cd backend
          npm cache clean --force
          rm -rf node_modules package-lock.json
          npm install

      - name: Build project
        run: |
          cd backend
          npm run build

      - name: Configure package for GitHub Registry
        run: |
          cd backend
          # Create a temporary package.json for GitHub registry
          jq '.name = "@${{ github.repository_owner }}/" + (.name | split("/")[-1])' package.json > package-gpr.json
          mv package-gpr.json package.json

      - name: Update version (if specified)
        if: github.event.inputs.version != ''
        run: |
          cd backend
          npm version ${{ github.event.inputs.version }} --no-git-tag-version

      - name: Publish to GitHub Package Registry
        run: |
          cd backend
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-docker-image:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/products-demo-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify:
    needs: [publish-npm, publish-gpr, create-docker-image]
    runs-on: ubuntu-latest
    if: always() && (github.event_name == 'release' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Notify success
        if: ${{ needs.publish-npm.result == 'success' }}
        run: |
          echo "‚úÖ Package successfully published to npm!"
          echo "üì¶ npm: https://www.npmjs.com/package/products-demo-api"
          
      - name: Notify GitHub Registry success
        if: ${{ needs.publish-gpr.result == 'success' }}
        run: |
          echo "‚úÖ Package successfully published to GitHub Package Registry!"
          echo "üì¶ GPR: https://github.com/${{ github.repository }}/packages"
          
      - name: Notify Docker success
        if: ${{ needs.create-docker-image.result == 'success' }}
        run: |
          echo "‚úÖ Docker image successfully published!"
          echo "üê≥ Docker: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/products-demo-api"

      - name: Notify failure
        if: ${{ needs.publish-npm.result == 'failure' || needs.publish-gpr.result == 'failure' || needs.create-docker-image.result == 'failure' }}
        run: |
          echo "‚ùå Some publish jobs failed. Check the logs for details."
          exit 1